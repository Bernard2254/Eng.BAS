#include "SOIL/SOIL.h"
#include <GL/glew.h>
#include <GL/freeglut.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include "Eng.BAS.h"
#include "Eng.BAS.Apresentacao.h"
#include "Eng.BAS.Texturas.h"

int tamx=700, tamy=500, dimensaox=100, dimensaoy=100;

void init(){
  glClearColor(1,1,1,1);
  glClear(GL_COLOR_BUFFER_BIT);
  global=c=cor=cor2=cor3=alfa=0;
}

void Idle(){
  switch(global){
    case 0:
      mudacor();
      break;
    case 1:
      atualiza();
      break;
    case 2:
      break;
  }
}

void desenha(){

  switch (global) {
    case 0:
      escreve();
      glClearColor(cor, cor2, cor3, 1);
      glClear(GL_COLOR_BUFFER_BIT);
      escreveTexto(GLUT_BITMAP_9_BY_15, v, 25, 50);
      glutSwapBuffers();
      if(strcmp(string, v)==0){
       global++;
       glClear(GL_COLOR_BUFFER_BIT);
      }
      c++;
      glutTimerFunc(185, atualiza, 0);
      break;

    case 1:
      desenhaTextura(0,0);
      glutSwapBuffers();
      alfa=alfa+0.00009;
      if(alfa>0.02)
        alfa=alfa+0.01;
      if(alfa>0.3){
        alfa=1;
        global++;
        glutPostRedisplay();
      }
      break;

    case 2:
      menu();
      break;
  }
}

void movimentoMouse(int x, int y){
  //printf("x = %d e y = %d\n", x, y);
  switch (global) {
    case 2:
      if(x>=((36*tamx)/dimensaox) && x<=((60*tamx)/dimensaox) && y>=((20*tamy)/dimensaoy) && y<=((30*tamy)/dimensaoy)){
        //printf("Passou\n");
        posicionaBotao(texturaBotaoPressionado,50,75);
        colocaTextoBotao(texturaJogar,49, 76);
        glutSwapBuffers();
      }
      else if(x>=((36*tamx)/dimensaox) && x<=((60*tamx)/dimensaox) && y>=((40*tamy)/dimensaoy) && y<=((50*tamy)/dimensaoy)){
        posicionaBotao(texturaBotaoPressionado,50,55);
        colocaTextoBotao(texturaOpcoes, 49, 56);
        glutSwapBuffers();
      }
      else if(x>=((36*tamx)/dimensaox) && x<=((60*tamx)/dimensaox) && y>=((60*tamy)/dimensaoy) && y<=((70*tamy)/dimensaoy)){
        posicionaBotao(texturaBotaoPressionado,50,35);
        colocaTextoBotao(texturaInstrucoes, 49, 36);
        glutSwapBuffers();
      }
      else if(x>=((36*tamx)/dimensaox) && x<=((60*tamx)/dimensaox) && y>=((80*tamy)/dimensaoy) && y<=((90*tamy)/dimensaoy)){
        posicionaBotao(texturaBotaoPressionado,50,15);
        colocaTextoBotao(texturaSair, 49, 16);
        glutSwapBuffers();
      }
      else{
        glClear(GL_COLOR_BUFFER_BIT);
        desenhaTextura(0,0);
        menu();
      }

      }
  }


void redimensiona(int w, int h)
{
   glViewport(0, 0, (GLsizei) w, (GLsizei) h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(0, dimensaox, 0, dimensaoy, -1.0, 1.0);
   glMatrixMode(GL_MODELVIEW);
   glLoadIdentity();
}

void teclado(unsigned char key, int x, int y)
{
   switch (global) {
     case 0:
        if(key>0)
        glClearColor(1,1,1,1);
        glClear(GL_COLOR_BUFFER_BIT);
          global++;
        break;
      case 2:
        switch (key) {
          case 27:
            exit(0);
        }
        break;
    }
}


int main(int argc, char** argv)
{
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowSize(tamx,tamy);
   glutInitWindowPosition(300, 1200);

   glutCreateWindow("Engenhar√≠adas");
   init();
   InitTexturas();
   glutReshapeFunc(redimensiona);
   glutDisplayFunc(desenha);
   glutKeyboardFunc(teclado);
   glutPassiveMotionFunc(movimentoMouse);
   glutIdleFunc(Idle);

   glutMainLoop();
   return 0;
}
